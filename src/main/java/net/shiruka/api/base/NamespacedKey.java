/*
 * MIT License
 *
 * Copyright (c) 2021 Shiru ka
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package net.shiruka.api.base;

import com.google.common.base.Preconditions;
import java.util.Locale;
import java.util.UUID;
import java.util.regex.Pattern;
import net.shiruka.api.plugin.Plugin;
import org.jetbrains.annotations.NotNull;

/**
 * a class that represents a {@link String} based key which consists of two components which are a namespace and a key.
 */
public final class NamespacedKey implements Namespaced {

  /**
   * the namespace representing all inbuilt keys.
   */
  private static final String MINECRAFT = "minecraft";

  /**
   * the namespace representing all keys generated by Bukkit for backwards compatibility measures.
   */
  private static final String SHIRU_KA = "shiru_ka";

  /**
   * the valid key pattern.
   */
  private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");

  /**
   * the valid namespace pattern.
   */
  private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");

  /**
   * the key.
   */
  @NotNull
  private final String key;

  /**
   * the namespace.
   */
  @NotNull
  private final String namespace;

  /**
   * ctor.
   *
   * @param namespace the namespace.
   * @param key the key.
   */
  private NamespacedKey(@NotNull final String namespace, @NotNull final String key) {
    this.namespace = namespace.toLowerCase(Locale.ROOT);
    this.key = key.toLowerCase(Locale.ROOT);
  }

  /**
   * creates a new namespaced key instance.
   *
   * @param namespace the namespace to create.
   * @param key the key to create.
   *
   * @return a newly created namespaced key.
   */
  @NotNull
  public static NamespacedKey create(@NotNull final String namespace, @NotNull final String key) {
    final var finalNamespace = namespace.toLowerCase(Locale.ROOT);
    final var finalKey = key.toLowerCase(Locale.ROOT);
    Preconditions.checkArgument(NamespacedKey.VALID_NAMESPACE.matcher(finalNamespace).matches(),
      "Invalid namespace. Must be [a-z0-9._-]: %s", finalNamespace);
    Preconditions.checkArgument(NamespacedKey.VALID_KEY.matcher(finalKey).matches(), "" +
      "Invalid key. Must be [a-z0-9/._-]: %s", finalKey);
    final var string = String.format("%s : %s", finalNamespace, finalKey);
    Preconditions.checkArgument(string.length() < 256,
      "NamespacedKey must be less than 256 characters", string);
    return new NamespacedKey(finalNamespace, finalKey);
  }

  /**
   * creates a key in the Minecraft namespace.
   *
   * @param key the key to use.
   *
   * @return new key in the Minecraft namespace.
   */
  @NotNull
  public static NamespacedKey minecraft(@NotNull final String key) {
    return NamespacedKey.create(NamespacedKey.MINECRAFT, key);
  }

  /**
   * creates a key in the {@link Plugin#getName()} namespace.
   *
   * @param plugin the plugin to use.
   * @param key the key to use.
   *
   * @return new key in the plugin name namespace.
   */
  @NotNull
  public static NamespacedKey plugin(@NotNull final Plugin plugin, @NotNull final String key) {
    return NamespacedKey.create(plugin.getName(), key);
  }

  /**
   * creates a new random key in the {@link #SHIRU_KA} namespace.
   *
   * @return new key.
   */
  @NotNull
  public static NamespacedKey randomKey() {
    return NamespacedKey.create(NamespacedKey.SHIRU_KA, UUID.randomUUID().toString());
  }

  @NotNull
  @Override
  public String getKey() {
    return this.key;
  }

  @NotNull
  @Override
  public String getNamespace() {
    return this.namespace;
  }

  @Override
  public int hashCode() {
    var hash = 5;
    hash = 47 * hash + this.namespace.hashCode();
    hash = 47 * hash + this.key.hashCode();
    return hash;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == null) {
      return false;
    }
    if (this.getClass() != obj.getClass()) {
      return false;
    }
    final var other = (NamespacedKey) obj;
    return this.namespace.equals(other.namespace) && this.key.equals(other.key);
  }

  @Override
  public String toString() {
    return this.namespace + ":" + this.key;
  }
}
